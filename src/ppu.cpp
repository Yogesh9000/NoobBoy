#include "ppu.hpp"
#include "SDL3/SDL_init.h"
#include "SDL3/SDL_pixels.h"
#include "SDL3/SDL_render.h"
#include "SDL3/SDL_video.h"

// TODO: Add error handling as each of SDL functions may fail
PPU::PPU(const char *title) // NOLINT(hicpp-member-init)
  : m_pixels(static_cast<unsigned long>(PIXEL_SIZE * LCD_WIDTH * LCD_HEIGHT), 0)
{
  SDL_InitSubSystem(SDL_INIT_VIDEO);
  SDL_CreateWindowAndRenderer(title, LCD_WIDTH * SCALE, LCD_HEIGHT * SCALE, SDL_WINDOW_RESIZABLE, &m_window, &m_renderer);
  m_texture = SDL_CreateTexture(m_renderer, SDL_PIXELFORMAT_RGB24, SDL_TEXTUREACCESS_STREAMING, LCD_WIDTH, LCD_HEIGHT);
}

PPU::~PPU()
{
  SDL_DestroyTexture(m_texture);
  SDL_DestroyRenderer(m_renderer);
  SDL_DestroyWindow(m_window);
  SDL_QuitSubSystem(SDL_INIT_VIDEO);
  SDL_Quit();
}

// Update the window content to match current pixel data generated by PPU
void PPU::UpdateFrame()
{
  SDL_UpdateTexture(m_texture, nullptr, m_pixels.data(), LCD_WIDTH * PIXEL_SIZE);
  SDL_RenderClear(m_renderer);
  SDL_RenderTexture(m_renderer, m_texture, nullptr, nullptr);
  SDL_RenderPresent(m_renderer);
}

void PPU::Tick(int cycles)
{
  // TODO:
}
